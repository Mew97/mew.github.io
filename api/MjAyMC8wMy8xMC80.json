{"title":"基于Spring Cloud Alibaba构建一个微服务","date":"2020-03-10T06:31:23.000Z","date_formatted":{"ll":"2020年3月10日","L":"2020/03/10","MM-DD":"03-10"},"link":"2020/03/10/4","updated":"2020-03-10T10:59:41.087Z","content":"<h1 id=\"基于spring-cloud-alibaba构建一个微服务\">基于Spring Cloud Alibaba构建一个微服务<a href=\"#基于spring-cloud-alibaba构建一个微服务\" title=\"基于Spring Cloud Alibaba构建一个微服务\"></a></h1><h2 id=\"微服务方案简介\">微服务方案简介<a href=\"#微服务方案简介\" title=\"微服务方案简介\"></a></h2><p>目前市场上主流的微服务有三套：</p>\n<ul><li>第一套：Spring Boot + Spring Cloud Netflix</li><li>第二套：Spring Boot + Dubbo + Zookeeper</li><li>第三套：Spring Boot + Spring Cloud Alibaba</li></ul><p>第一套方案是目前使用较为广泛的，但是<strong>2018 年 12 月 12 日，Netflix 宣布 Spring Cloud Netflix 系列技术栈进入维护模式（不再添加新特性）</strong>，这意味着该项目不再拥有功能上的更新，于是其中很多的模块就出现了相应的替代品，也许在不久的将来，整个就会被淘汰。</p>\n<p>第二套的特点是集成了Apache Dubbo这个高性能、轻量级的Java RPC开源框架，相信Dubbo现在已经非常流行，使用过的人应该都能感受到他的强大。其次这套方案协调框架采用的是Zookeeper，这同样是在分布式领域非常流行的一个强一致性框架，解决了分布式环境中复杂的协调和管理服务，让开发人员专注于核心应用程序逻辑，而不必担心应用程序的分布式特性。</p>\n<p>第三套方案也是最年轻的一套方案，<strong>2018 年 10 月 31 日的凌晨，这个伟大的日子里，Spring Cloud Alibaba 正式入驻了 Spring Cloud 官方孵化器，并在 Maven 中央库发布了第一个版本：</strong> </p>\n<p><a href=\"https://spring.io/blog/2018/10/30/spring-cloud-for-alibaba-0-2-0-released\" target=\"_blank\">Spring Cloud for Alibaba 0.2.0 released</a></p>\n<p>如下是官方的介绍：</p>\n<blockquote>\n<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>\n<p>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>\n</blockquote>\n<p><strong>在2019的8月份，Spring Cloud Alibaba 才发布了他的第一个正式版本</strong>，正如他所介绍的那样，致力于一站式解决方案，你只需要几个简单的配置，就可以解决微服务中需要解决的诸多问题：服务的注册与发现，服务间通信，负载均衡，限流降级，动态配置等。</p>\n<h2 id=\"spring-cloud-alibaba\">Spring Cloud Alibaba<a href=\"#spring-cloud-alibaba\" title=\"Spring Cloud Alibaba\"></a></h2><h3 id=\"服务注册与发现\">服务注册与发现<a href=\"#服务注册与发现\" title=\"服务注册与发现\"></a></h3><p>阿里采用了全新的Nacos来实现服务注册中心，相比于传统的Eureka，更加简单易用，功能也似乎更加强大，使用简单，界面UI也十分友好，而Nacos的分布式协调架构放弃了Zookeeper，至于为什么放弃，解释如下：</p>\n<blockquote>\n<h3 id=\"cap\">CAP<a href=\"#cap\" title=\"CAP\"></a></h3><p>有个思考，从 CAP 角度考虑，服务注册中心是 CP 系统还是 AP 系统呢？</p>\n<ul><li>服务注册中心是为了服务间调用服务的，那么绝对不允许因为服务注册中心出现了问题而导致服务间的调用出问题</li><li>假如有 node1，node2，node3 集群节点。保存着可用服务列表 ip1，ip2，ip3，试想如果此时不一致，比如 node1 只保存了ip1，ip2，此时服务读取 node1 的节点，那么会造成什么影响？</li></ul><p>调用 node1 的服务，顶多就是负载均衡时不会有流量打到 ip3，然后等 node1 同步回 ip3 后，又一致了，这对服务其实没什么太大影响。所以，推测出服务注册中心应该是个 AP 系统。</p>\n<h3 id=\"zookeeper-是个-cp-系统，强一致性\">Zookeeper 是个 CP 系统，强一致性<a href=\"#zookeeper-是个-cp-系统，强一致性\" title=\"Zookeeper 是个 CP 系统，强一致性\"></a></h3><ul><li>场景1，当 master 挂了，此时 Zookeeper 集群需要重新选举，而此时服务需要来读取可用服务，是不可用的。影响到了服务的可用性当然你可以说服务本地有缓存可用列表。然而下面这种方式就更无法处理了。</li><li>场景2，分区可用。试想，有 3 个机房，如果其中机房 3 和机房 1，2 网络断了，那么机房 3 的注册中心就不能注册新的机器了，这显然也不合理</li></ul><p><img src=\"https://mew.oss-cn-shanghai.aliyuncs.com/img2/da288a836eac2ddeeb0bbdfa0fd29fb4b8d.jpg\"></p>\n<ul><li>从健康检查角度来看Zookeeper 是通过 TCP 的心跳判断服务是否可用，但 TCP 的活性并不代表服务是可用的，如：连接池已满，DB 挂了等</li></ul><h3 id=\"理想的注册中心\">理想的注册中心<a href=\"#理想的注册中心\" title=\"理想的注册中心\"></a></h3><ul><li>服务自动注册发现。最好有新的服务注册上去时还能推送到调用端</li><li>能对注册上来的机器方便的进行管理，能手动删除（发送信号让服务优雅下线）、恢复机器</li><li>服务的健康检查，能真正的检测到服务是否可用</li><li>可以看到是否有其他调用服务正在订阅注册上来的服务</li><li>能够带上些除了 IP 外的其它信息</li></ul></blockquote>\n<p>关于Nacos的使用方法，请戳<a>这里</a>跳转,推荐使用Docker方式安装。</p>\n<h3 id=\"服务间通信\">服务间通信<a href=\"#服务间通信\" title=\"服务间通信\"></a></h3><p>Spring Cloud Alibaba仍然支持对于Dubbo的集成，对代码基本无侵入，同时，也可以使用Feign调用，他底层不同于Dubbo，封装了Ribbon，属于http调用，Spring Cloud自带，使用起来非常便捷：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FeignClient</span>(<span class=\"string\">\"service1\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IGetUserService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/get\"</span>)</span><br><span class=\"line\">    <span class=\"function\">List&lt;User&gt; <span class=\"title\">feignGet</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>调用以上接口就相当于以http的方式调用”service1“服务的 “/get” 端点。同时，当有多个“service1”存在时，Feign自动的就实现了负载均衡，默认情况下使用的是轮询访问策略，当然还有其他策略可以选择，直接在yaml文件里配置就可以生效：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 配置负载均衡，默通过ribbon实现，默认是轮询模式</span></span><br><span class=\"line\"><span class=\"attr\">sca-provider-service:</span> <span class=\"comment\"># 单个服务写上服务名</span></span><br><span class=\"line\">  <span class=\"attr\">ribbon:</span></span><br><span class=\"line\">    <span class=\"attr\">NFLoadBalancerRuleClassName:</span> <span class=\"string\">com.netflix.loadbalancer.RandomRule</span> <span class=\"comment\"># 随机规则</span></span><br><span class=\"line\"><span class=\"comment\">#   NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule # 轮询(默认)</span></span><br><span class=\"line\"><span class=\"comment\">#   NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule # 重试</span></span><br><span class=\"line\"><span class=\"comment\">#   NFLoadBalancerRuleClassName: com.netflix.loadbalancer.WeightedResponseTimeRule # 响应时间权重</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"服务熔断降级\">服务熔断降级<a href=\"#服务熔断降级\" title=\"服务熔断降级\"></a></h3><p>为什么要做熔断降级，首先了解“雪崩”效应:</p>\n<blockquote>\n<p>在微服务架构中，根据业务来拆分成一个个的服务，服务与服务之间可以通过 <code>RPC</code> 相互调用，在 Spring Cloud 中可以用 <code>RestTemplate + LoadBalanceClient</code> 和 <code>Feign</code> 来调用。为了保证其高可用，单个服务通常会集群部署。由于网络原因或者自身的原因，服务并不能保证 100% 可用，如果单个服务出现问题，调用这个服务就会出现线程阻塞，此时若有大量的请求涌入，<code>Servlet</code> 容器的线程资源会被消耗完毕，导致服务瘫痪。服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 <strong>“雪崩”</strong> 效应。</p>\n</blockquote>\n<p>阿里使用<strong><a href=\"https://github.com/alibaba/Sentinel/wiki/介绍\" target=\"_blank\">Sentinel</a></strong>(👈🏻点击进入中文文档)来做熔断降级</p>\n<h3 id=\"路由网关统一访问接口\">路由网关统一访问接口<a href=\"#路由网关统一访问接口\" title=\"路由网关统一访问接口\"></a></h3><p>此处沿用Spring Cloud Gateway</p>\n<h4 id=\"spring-cloud-gateway-功能特征\">Spring Cloud Gateway 功能特征<a href=\"#spring-cloud-gateway-功能特征\" title=\"Spring Cloud Gateway 功能特征\"></a></h4><blockquote>\n<ul><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</li><li>动态路由</li><li>Predicates 和 Filters 作用于特定路由</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>易于编写的 Predicates 和 Filters</li><li>限流</li><li>路径重写</li></ul></blockquote>\n<h4 id=\"spring-cloud-gateway-工程流程\">Spring Cloud Gateway 工程流程<a href=\"#spring-cloud-gateway-工程流程\" title=\"Spring Cloud Gateway 工程流程\"></a></h4><p><img src=\"https://mew.oss-cn-shanghai.aliyuncs.com/img2/22e4eccf2cbe09332678c04b8de98ebe.jpg\" class=\"φcy\"></p>\n<p>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。</p>\n<p>过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（<code>pre</code>）或之后（<code>post</code>）执行业务逻辑。</p>\n<h3 id=\"链路追踪\">链路追踪<a href=\"#链路追踪\" title=\"链路追踪\"></a></h3><ul><li>SkyWalking</li></ul><h3 id=\"异步通信\">异步通信<a href=\"#异步通信\" title=\"异步通信\"></a></h3><ul><li>RocketMQ</li><li>RibbitMQ</li><li>Kafka</li></ul>","next":{"title":"虞美人·听雨","link":"2020/03/08/2"},"plink":"https://mew.wiki.com/2020/03/10/4/","toc":[{"id":"基于spring-cloud-alibaba构建一个微服务","title":"基于Spring Cloud Alibaba构建一个微服务","index":"1","children":[{"id":"微服务方案简介","title":"微服务方案简介","index":"1.1"},{"id":"spring-cloud-alibaba","title":"Spring Cloud Alibaba","index":"1.2","children":[{"id":"服务注册与发现","title":"服务注册与发现","index":"1.2.1"},{"id":"cap","title":"CAP","index":"1.2.2"},{"id":"zookeeper-是个-cp-系统，强一致性","title":"Zookeeper 是个 CP 系统，强一致性","index":"1.2.3"},{"id":"理想的注册中心","title":"理想的注册中心","index":"1.2.4"},{"id":"服务间通信","title":"服务间通信","index":"1.2.5"},{"id":"服务熔断降级","title":"服务熔断降级","index":"1.2.6"},{"id":"路由网关统一访问接口","title":"路由网关统一访问接口","index":"1.2.7"},{"id":"链路追踪","title":"链路追踪","index":"1.2.8"},{"id":"异步通信","title":"异步通信","index":"1.2.9"}]}]}]}